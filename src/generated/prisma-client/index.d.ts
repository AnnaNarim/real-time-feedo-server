// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  class: (where?: ClassWhereInput) => Promise<boolean>;
  field: (where?: FieldWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  class: (where: ClassWhereUniqueInput) => ClassPromise;
  classes: (args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Class>;
  classesConnection: (args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassConnectionPromise;
  field: (where: FieldWhereUniqueInput) => FieldPromise;
  fields: (args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Field>;
  fieldsConnection: (args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FieldConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createClass: (data: ClassCreateInput) => ClassPromise;
  updateClass: (args: {
    data: ClassUpdateInput;
    where: ClassWhereUniqueInput;
  }) => ClassPromise;
  updateManyClasses: (args: {
    data: ClassUpdateManyMutationInput;
    where?: ClassWhereInput;
  }) => BatchPayloadPromise;
  upsertClass: (args: {
    where: ClassWhereUniqueInput;
    create: ClassCreateInput;
    update: ClassUpdateInput;
  }) => ClassPromise;
  deleteClass: (where: ClassWhereUniqueInput) => ClassPromise;
  deleteManyClasses: (where?: ClassWhereInput) => BatchPayloadPromise;
  createField: (data: FieldCreateInput) => FieldPromise;
  updateField: (args: {
    data: FieldUpdateInput;
    where: FieldWhereUniqueInput;
  }) => FieldPromise;
  updateManyFields: (args: {
    data: FieldUpdateManyMutationInput;
    where?: FieldWhereInput;
  }) => BatchPayloadPromise;
  upsertField: (args: {
    where: FieldWhereUniqueInput;
    create: FieldCreateInput;
    update: FieldUpdateInput;
  }) => FieldPromise;
  deleteField: (where: FieldWhereUniqueInput) => FieldPromise;
  deleteManyFields: (where?: FieldWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  class: (
    where?: ClassSubscriptionWhereInput
  ) => ClassSubscriptionPayloadSubscription;
  field: (
    where?: FieldSubscriptionWhereInput
  ) => FieldSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "anonymous_ASC"
  | "anonymous_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "answerType_ASC"
  | "answerType_DESC";

export type FieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClassOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "published_ASC"
  | "published_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  anonymous?: Boolean;
  anonymous_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  answerType?: String;
  answerType_not?: String;
  answerType_in?: String[] | String;
  answerType_not_in?: String[] | String;
  answerType_lt?: String;
  answerType_lte?: String;
  answerType_gt?: String;
  answerType_gte?: String;
  answerType_contains?: String;
  answerType_not_contains?: String;
  answerType_starts_with?: String;
  answerType_not_starts_with?: String;
  answerType_ends_with?: String;
  answerType_not_ends_with?: String;
  author?: UserWhereInput;
  fields_every?: FieldWhereInput;
  fields_some?: FieldWhereInput;
  fields_none?: FieldWhereInput;
  classes_every?: ClassWhereInput;
  classes_some?: ClassWhereInput;
  classes_none?: ClassWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface FieldWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  post?: PostWhereInput;
  AND?: FieldWhereInput[] | FieldWhereInput;
  OR?: FieldWhereInput[] | FieldWhereInput;
  NOT?: FieldWhereInput[] | FieldWhereInput;
}

export interface ClassWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  post?: PostWhereInput;
  published?: Boolean;
  published_not?: Boolean;
  answers_every?: AnswerWhereInput;
  answers_some?: AnswerWhereInput;
  answers_none?: AnswerWhereInput;
  AND?: ClassWhereInput[] | ClassWhereInput;
  OR?: ClassWhereInput[] | ClassWhereInput;
  NOT?: ClassWhereInput[] | ClassWhereInput;
}

export interface AnswerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  class?: ClassWhereInput;
  AND?: AnswerWhereInput[] | AnswerWhereInput;
  OR?: AnswerWhereInput[] | AnswerWhereInput;
  NOT?: AnswerWhereInput[] | AnswerWhereInput;
}

export type ClassWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type FieldWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface AnswerCreateInput {
  value: String;
  class: ClassCreateOneWithoutAnswersInput;
}

export interface ClassCreateOneWithoutAnswersInput {
  create?: ClassCreateWithoutAnswersInput;
  connect?: ClassWhereUniqueInput;
}

export interface ClassCreateWithoutAnswersInput {
  name: String;
  post: PostCreateOneWithoutClassesInput;
  published?: Boolean;
}

export interface PostCreateOneWithoutClassesInput {
  create?: PostCreateWithoutClassesInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutClassesInput {
  published?: Boolean;
  anonymous?: Boolean;
  title: String;
  content: String;
  answerType: String;
  author: UserCreateOneWithoutPostsInput;
  fields?: FieldCreateManyWithoutPostInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  password: String;
  name: String;
}

export interface FieldCreateManyWithoutPostInput {
  create?: FieldCreateWithoutPostInput[] | FieldCreateWithoutPostInput;
  connect?: FieldWhereUniqueInput[] | FieldWhereUniqueInput;
}

export interface FieldCreateWithoutPostInput {
  label: String;
  type: String;
}

export interface AnswerUpdateInput {
  value?: String;
  class?: ClassUpdateOneRequiredWithoutAnswersInput;
}

export interface ClassUpdateOneRequiredWithoutAnswersInput {
  create?: ClassCreateWithoutAnswersInput;
  update?: ClassUpdateWithoutAnswersDataInput;
  upsert?: ClassUpsertWithoutAnswersInput;
  connect?: ClassWhereUniqueInput;
}

export interface ClassUpdateWithoutAnswersDataInput {
  name?: String;
  post?: PostUpdateOneRequiredWithoutClassesInput;
  published?: Boolean;
}

export interface PostUpdateOneRequiredWithoutClassesInput {
  create?: PostCreateWithoutClassesInput;
  update?: PostUpdateWithoutClassesDataInput;
  upsert?: PostUpsertWithoutClassesInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutClassesDataInput {
  published?: Boolean;
  anonymous?: Boolean;
  title?: String;
  content?: String;
  answerType?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  fields?: FieldUpdateManyWithoutPostInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface FieldUpdateManyWithoutPostInput {
  create?: FieldCreateWithoutPostInput[] | FieldCreateWithoutPostInput;
  delete?: FieldWhereUniqueInput[] | FieldWhereUniqueInput;
  connect?: FieldWhereUniqueInput[] | FieldWhereUniqueInput;
  disconnect?: FieldWhereUniqueInput[] | FieldWhereUniqueInput;
  update?:
    | FieldUpdateWithWhereUniqueWithoutPostInput[]
    | FieldUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | FieldUpsertWithWhereUniqueWithoutPostInput[]
    | FieldUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: FieldScalarWhereInput[] | FieldScalarWhereInput;
  updateMany?:
    | FieldUpdateManyWithWhereNestedInput[]
    | FieldUpdateManyWithWhereNestedInput;
}

export interface FieldUpdateWithWhereUniqueWithoutPostInput {
  where: FieldWhereUniqueInput;
  data: FieldUpdateWithoutPostDataInput;
}

export interface FieldUpdateWithoutPostDataInput {
  label?: String;
  type?: String;
}

export interface FieldUpsertWithWhereUniqueWithoutPostInput {
  where: FieldWhereUniqueInput;
  update: FieldUpdateWithoutPostDataInput;
  create: FieldCreateWithoutPostInput;
}

export interface FieldScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  AND?: FieldScalarWhereInput[] | FieldScalarWhereInput;
  OR?: FieldScalarWhereInput[] | FieldScalarWhereInput;
  NOT?: FieldScalarWhereInput[] | FieldScalarWhereInput;
}

export interface FieldUpdateManyWithWhereNestedInput {
  where: FieldScalarWhereInput;
  data: FieldUpdateManyDataInput;
}

export interface FieldUpdateManyDataInput {
  label?: String;
  type?: String;
}

export interface PostUpsertWithoutClassesInput {
  update: PostUpdateWithoutClassesDataInput;
  create: PostCreateWithoutClassesInput;
}

export interface ClassUpsertWithoutAnswersInput {
  update: ClassUpdateWithoutAnswersDataInput;
  create: ClassCreateWithoutAnswersInput;
}

export interface AnswerUpdateManyMutationInput {
  value?: String;
}

export interface ClassCreateInput {
  name: String;
  post: PostCreateOneWithoutClassesInput;
  published?: Boolean;
  answers?: AnswerCreateManyWithoutClassInput;
}

export interface AnswerCreateManyWithoutClassInput {
  create?: AnswerCreateWithoutClassInput[] | AnswerCreateWithoutClassInput;
  connect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
}

export interface AnswerCreateWithoutClassInput {
  value: String;
}

export interface ClassUpdateInput {
  name?: String;
  post?: PostUpdateOneRequiredWithoutClassesInput;
  published?: Boolean;
  answers?: AnswerUpdateManyWithoutClassInput;
}

export interface AnswerUpdateManyWithoutClassInput {
  create?: AnswerCreateWithoutClassInput[] | AnswerCreateWithoutClassInput;
  delete?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  connect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  disconnect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  update?:
    | AnswerUpdateWithWhereUniqueWithoutClassInput[]
    | AnswerUpdateWithWhereUniqueWithoutClassInput;
  upsert?:
    | AnswerUpsertWithWhereUniqueWithoutClassInput[]
    | AnswerUpsertWithWhereUniqueWithoutClassInput;
  deleteMany?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  updateMany?:
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput;
}

export interface AnswerUpdateWithWhereUniqueWithoutClassInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutClassDataInput;
}

export interface AnswerUpdateWithoutClassDataInput {
  value?: String;
}

export interface AnswerUpsertWithWhereUniqueWithoutClassInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutClassDataInput;
  create: AnswerCreateWithoutClassInput;
}

export interface AnswerScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  OR?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  NOT?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  value?: String;
}

export interface ClassUpdateManyMutationInput {
  name?: String;
  published?: Boolean;
}

export interface FieldCreateInput {
  label: String;
  type: String;
  post: PostCreateOneWithoutFieldsInput;
}

export interface PostCreateOneWithoutFieldsInput {
  create?: PostCreateWithoutFieldsInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutFieldsInput {
  published?: Boolean;
  anonymous?: Boolean;
  title: String;
  content: String;
  answerType: String;
  author: UserCreateOneWithoutPostsInput;
  classes?: ClassCreateManyWithoutPostInput;
}

export interface ClassCreateManyWithoutPostInput {
  create?: ClassCreateWithoutPostInput[] | ClassCreateWithoutPostInput;
  connect?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
}

export interface ClassCreateWithoutPostInput {
  name: String;
  published?: Boolean;
  answers?: AnswerCreateManyWithoutClassInput;
}

export interface FieldUpdateInput {
  label?: String;
  type?: String;
  post?: PostUpdateOneRequiredWithoutFieldsInput;
}

export interface PostUpdateOneRequiredWithoutFieldsInput {
  create?: PostCreateWithoutFieldsInput;
  update?: PostUpdateWithoutFieldsDataInput;
  upsert?: PostUpsertWithoutFieldsInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutFieldsDataInput {
  published?: Boolean;
  anonymous?: Boolean;
  title?: String;
  content?: String;
  answerType?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  classes?: ClassUpdateManyWithoutPostInput;
}

export interface ClassUpdateManyWithoutPostInput {
  create?: ClassCreateWithoutPostInput[] | ClassCreateWithoutPostInput;
  delete?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  connect?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  disconnect?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  update?:
    | ClassUpdateWithWhereUniqueWithoutPostInput[]
    | ClassUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | ClassUpsertWithWhereUniqueWithoutPostInput[]
    | ClassUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: ClassScalarWhereInput[] | ClassScalarWhereInput;
  updateMany?:
    | ClassUpdateManyWithWhereNestedInput[]
    | ClassUpdateManyWithWhereNestedInput;
}

export interface ClassUpdateWithWhereUniqueWithoutPostInput {
  where: ClassWhereUniqueInput;
  data: ClassUpdateWithoutPostDataInput;
}

export interface ClassUpdateWithoutPostDataInput {
  name?: String;
  published?: Boolean;
  answers?: AnswerUpdateManyWithoutClassInput;
}

export interface ClassUpsertWithWhereUniqueWithoutPostInput {
  where: ClassWhereUniqueInput;
  update: ClassUpdateWithoutPostDataInput;
  create: ClassCreateWithoutPostInput;
}

export interface ClassScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  AND?: ClassScalarWhereInput[] | ClassScalarWhereInput;
  OR?: ClassScalarWhereInput[] | ClassScalarWhereInput;
  NOT?: ClassScalarWhereInput[] | ClassScalarWhereInput;
}

export interface ClassUpdateManyWithWhereNestedInput {
  where: ClassScalarWhereInput;
  data: ClassUpdateManyDataInput;
}

export interface ClassUpdateManyDataInput {
  name?: String;
  published?: Boolean;
}

export interface PostUpsertWithoutFieldsInput {
  update: PostUpdateWithoutFieldsDataInput;
  create: PostCreateWithoutFieldsInput;
}

export interface FieldUpdateManyMutationInput {
  label?: String;
  type?: String;
}

export interface PostCreateInput {
  published?: Boolean;
  anonymous?: Boolean;
  title: String;
  content: String;
  answerType: String;
  author: UserCreateOneWithoutPostsInput;
  fields?: FieldCreateManyWithoutPostInput;
  classes?: ClassCreateManyWithoutPostInput;
}

export interface PostUpdateInput {
  published?: Boolean;
  anonymous?: Boolean;
  title?: String;
  content?: String;
  answerType?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  fields?: FieldUpdateManyWithoutPostInput;
  classes?: ClassUpdateManyWithoutPostInput;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  anonymous?: Boolean;
  title?: String;
  content?: String;
  answerType?: String;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  published?: Boolean;
  anonymous?: Boolean;
  title: String;
  content: String;
  answerType: String;
  fields?: FieldCreateManyWithoutPostInput;
  classes?: ClassCreateManyWithoutPostInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Boolean;
  anonymous?: Boolean;
  title?: String;
  content?: String;
  answerType?: String;
  fields?: FieldUpdateManyWithoutPostInput;
  classes?: ClassUpdateManyWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  anonymous?: Boolean;
  anonymous_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  answerType?: String;
  answerType_not?: String;
  answerType_in?: String[] | String;
  answerType_not_in?: String[] | String;
  answerType_lt?: String;
  answerType_lte?: String;
  answerType_gt?: String;
  answerType_gte?: String;
  answerType_contains?: String;
  answerType_not_contains?: String;
  answerType_starts_with?: String;
  answerType_not_starts_with?: String;
  answerType_ends_with?: String;
  answerType_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  published?: Boolean;
  anonymous?: Boolean;
  title?: String;
  content?: String;
  answerType?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AnswerWhereInput;
  AND?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
  OR?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
  NOT?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
}

export interface ClassSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClassWhereInput;
  AND?: ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput;
  OR?: ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput;
  NOT?: ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput;
}

export interface FieldSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FieldWhereInput;
  AND?: FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput;
  OR?: FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput;
  NOT?: FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  value: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  class: <T = ClassPromise>() => T;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  class: <T = ClassSubscription>() => T;
}

export interface Class {
  id: ID_Output;
  name: String;
  published: Boolean;
}

export interface ClassPromise extends Promise<Class>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  post: <T = PostPromise>() => T;
  published: () => Promise<Boolean>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassSubscription
  extends Promise<AsyncIterator<Class>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  post: <T = PostSubscription>() => T;
  published: () => Promise<AsyncIterator<Boolean>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  anonymous: Boolean;
  title: String;
  content: String;
  answerType: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  anonymous: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  answerType: () => Promise<String>;
  author: <T = UserPromise>() => T;
  fields: <T = FragmentableArray<Field>>(args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classes: <T = FragmentableArray<Class>>(args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  anonymous: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  answerType: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  fields: <T = Promise<AsyncIterator<FieldSubscription>>>(args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classes: <T = Promise<AsyncIterator<ClassSubscription>>>(args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Field {
  id: ID_Output;
  label: String;
  type: String;
}

export interface FieldPromise extends Promise<Field>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  type: () => Promise<String>;
  post: <T = PostPromise>() => T;
}

export interface FieldSubscription
  extends Promise<AsyncIterator<Field>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  post: <T = PostSubscription>() => T;
}

export interface AnswerConnection {}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassConnection {}

export interface ClassConnectionPromise
  extends Promise<ClassConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassEdge>>() => T;
  aggregate: <T = AggregateClassPromise>() => T;
}

export interface ClassConnectionSubscription
  extends Promise<AsyncIterator<ClassConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSubscription>() => T;
}

export interface ClassEdge {
  cursor: String;
}

export interface ClassEdgePromise extends Promise<ClassEdge>, Fragmentable {
  node: <T = ClassPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassEdgeSubscription
  extends Promise<AsyncIterator<ClassEdge>>,
    Fragmentable {
  node: <T = ClassSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClass {
  count: Int;
}

export interface AggregateClassPromise
  extends Promise<AggregateClass>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSubscription
  extends Promise<AsyncIterator<AggregateClass>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FieldConnection {}

export interface FieldConnectionPromise
  extends Promise<FieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FieldEdge>>() => T;
  aggregate: <T = AggregateFieldPromise>() => T;
}

export interface FieldConnectionSubscription
  extends Promise<AsyncIterator<FieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFieldSubscription>() => T;
}

export interface FieldEdge {
  cursor: String;
}

export interface FieldEdgePromise extends Promise<FieldEdge>, Fragmentable {
  node: <T = FieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FieldEdgeSubscription
  extends Promise<AsyncIterator<FieldEdge>>,
    Fragmentable {
  node: <T = FieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateField {
  count: Int;
}

export interface AggregateFieldPromise
  extends Promise<AggregateField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFieldSubscription
  extends Promise<AsyncIterator<AggregateField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  value: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface ClassSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ClassSubscriptionPayloadPromise
  extends Promise<ClassSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassPreviousValuesPromise>() => T;
}

export interface ClassSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassPreviousValuesSubscription>() => T;
}

export interface ClassPreviousValues {
  id: ID_Output;
  name: String;
  published: Boolean;
}

export interface ClassPreviousValuesPromise
  extends Promise<ClassPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface ClassPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface FieldSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FieldSubscriptionPayloadPromise
  extends Promise<FieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FieldPreviousValuesPromise>() => T;
}

export interface FieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FieldPreviousValuesSubscription>() => T;
}

export interface FieldPreviousValues {
  id: ID_Output;
  label: String;
  type: String;
}

export interface FieldPreviousValuesPromise
  extends Promise<FieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  type: () => Promise<String>;
}

export interface FieldPreviousValuesSubscription
  extends Promise<AsyncIterator<FieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  anonymous: Boolean;
  title: String;
  content: String;
  answerType: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  anonymous: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  answerType: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  anonymous: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  answerType: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Class",
    embedded: false
  },
  {
    name: "Field",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
